// HTTP
/**
 * HTTP (HyperText Transfer Protocol, 超文本传输协议)
 * 是因特网上应用最广泛的一种网络传输协议, 所有的 www 文件都必须遵守这个标准
 * HTTP 是一个基于 TCP/IP 通信协议来传递数据 (HTML 文件, 图片文件, 查询结果等)
 *
 * 基本原理
 * Web 内容都是存储在 Web 服务器上的. Web 服务器所使用的是 HTTP 协议, 因此经常会
 * 被称为 HTTP 服务器, 这些 HTTP 服务器存储了因特网中的数据, 如果 HTTP 客户端发出
 * 请求的话, 他们会提供数据, 客户端服务器发送 HTTP 请求, 服务器会在 HTTP 响应中回送
 * 锁清秋的数据, HTTP 客户端(比如浏览器)和 HTTP 服务器共同构成了万维网的基本组件
 *
 * MIME
 * MIME(Multipurpose Internet Mail Extension, 多用途因特网邮件扩展)
 * MIME 类型是一种文本标记, 表示一种主要的对象类型和一个特定的子类型, 中间由一条
 * 斜杠来分隔.
 * 因特网上有数千种不同的数据类型, HTTP 仔细地给每种要通过 Web 传输的对象都打上
 * 了名为 MIME 类型(MIME type) 的数据格式标签. 最初设计 MIME (Multipurpose
 * Internet Mail Extension, 多用途因特网邮件扩展) 是为了解决在不同的点子邮件
 * 系统之间搬移报文时存在的问题. MIME 在点子邮件系统中工作的非常好, 因此 HTTP 也
 * 采用了他, 用它来描述并标记多媒体内容.
 * Web 服务器会为所有 HTTP 对象数据附加一个MIME类型当 Web 浏览器从服务器中取回
 * 一个对象时, 会去查看相关的MIME类型, 看看他是否知道应该如何处理这个对象. 大多数
 * 浏览器都可以处理数百种常见的对象类型, 显示图片文件、解析并格式化 HTML文件、通过
 * 计算机声卡播放音频文件, 或者运行外部 5插件软件来处理特殊格式的数据
 *
 * URI 网络地址(概念)
 * 每个 Web 服务器资源都有一个名字, 这个客户端就可以说明他们感兴趣的资源是什么了.
 * 服务器资源名称为统一资源标识符(Uniform Resource Identifier, URI). URI
 * 就像因特网上的邮政地址一样, 在世界范围内唯一标识并定位信息资源
 *
 * URL 和 URN(目前只是一个实现设想) 是 URI 的实现
 * 统一资源定位符 (URL) 是资源标识符最常见的形式. URL 描述了一台特定服务器上某资源
 * 的特定位置, 他们可以明确说明如何从一个精确、固定的位置获取资源
 *
 * 大部分 URL 都遵循一种标准格式, 这种格式包含三个部分.
 *      1. URL 的第一部分被称为方案(scheme), 说明访问资源所使用的协议类型, 这部
 *          通常是 HTTP 协议(http://)
 *      2. 第二部分给出了服务器的因特网地址(域名(ip+端口))
 *      3. 其余部分指定 web 服务器上的某个资源
 *
 *
 * HTTP 报文
 *      HTTP 报文是由一行一行的简单字符串组成的, HTTP 报文都是纯文本, 不是二进制
 *      代码, 所以人们可以很方便地对其进行读写
 *      1. 请求报文
 *          GET /test/index.txt HTTP/1.0
 *          Accept: text/*
 *          Accept-Language: en, fr
 *
 *      2. 响应报文
 *          起始行 HTTP/1.0 200 OK
 *          首部  Context-type: text/plain
 *               Content-length: 19
 *          主体 Hi! World;
 */






















